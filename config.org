#+TITLE: My Emacs Config
#+AUTHOR: Charles Lambert

* Basic Settings
** Settings for backup and autosave files
#+BEGIN_SRC emacs-lisp
  ;;; -*- lexical-binding: t -*-
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+END_SRC

** Remove byte compile warnings
#+BEGIN_SRC emacs-lisp
(setq byte-compile-warnings '(not nresolved
                                  free-vars
                                  callargs
                                  redefine
                                  obsolete
                                  noruntime
                                  cl-functions
                                  interactive-only
                                  ))
#+END_SRC

** Other settings
# TODO: Need to sort throug these
#+BEGIN_SRC emacs-lisp
  (setq delete-old-versions -1 )          ; delete excess backup versions silently
  (setq version-control t )               ; use version control
  (setq vc-make-backup-files t )          ; make backups file even when in version controlled dir
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups")) ) ; which directory to put backups file
  (setq vc-follow-symlinks t )                                   ; don't ask for confirmation when opening symlinked file
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)) ) ;transform backups file name
  (setq inhibit-startup-screen t )        ; inhibit useless and old-school startup screen
  (setq ring-bell-function 'ignore )      ; silent bell when you make a mistake
  (setq coding-system-for-read 'utf-8 )   ; use utf-8 by default
  (setq coding-system-for-write 'utf-8 )
  (setq sentence-end-double-space nil)    ; sentence SHOULD end with only a point.
  (setq fill-column 80)           ; toggle wrapping text at the 80th character
  (setq initial-scratch-message "Hello Charlie. You can do the thing!")
  (setq default-directory "~/")
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (setq require-final-newline t)
  (setq confirm-kill-emacs 'y-or-n-p)
  (global-font-lock-mode t) ; Always have syntax highligting
  (show-paren-mode t)
  (setq show-paren-delay 0.0)
#+END_SRC

* Fonts
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist
             '(font . "DejaVuSansMono Nerd Font-12"))
#+END_SRC

* Theme
#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
  :ensure t
  :config
  (load-theme 'solarized-dark t))
#+END_SRC

* Functions
#+BEGIN_SRC emacs-lisp
  (defun byte-compile-init-dir ()
    "Byte-compile all your dotfiles."
    (interactive)
    (byte-recompile-directory user-emacs-directory 0))

  (defun remove-elc-on-save ()
    "If you're saving an elisp file, likely the .elc is no longer valid."
    (add-hook 'after-save-hook
              (lambda ()
                (if (file-exists-p (concat buffer-file-name "c"))
                    (delete-file (concat buffer-file-name "c"))))
              nil
              t))

#+END_SRC
* Definitions
#+BEGIN_SRC emacs-lisp
(setq my-global-keymaps '(normal visual insert motion emacs treemacs))
#+END_SRC
* General Hooks
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'remove-elc-on-save)
#+END_SRC
* COMMENT General.el Config
General is required above any packages using the :general keyword
#+BEGIN_SRC emacs-lisp
  (defun reload-config ()
    (interactive)
    (load-file "~/.emacs.d/init.el"))

  (defun edit-config ()
    (interactive)
    (find-file-at-point "~/.emacs.d/config.org"))

  (use-package general
    :ensure t
    :config
    (general-define-key
     :states '(normal visual insert motion emacs treemacs)
     :keymaps  'global-map
     :prefix "SPC"
     :non-normal-prefix "C-TAB"
     ;; "SPC" '(:prefix-command my-prefix :wk "prefix")

     ;; M-x
     "SPC" '(counsel-M-x :wk "M-x")

     ;; Window Keybindings
     "w" '(:ignore t :wk "windows")
     "wd" '(delete-window :wk "delete window")
     "wl" '(windmove-right :wk "move window right")
     "wh" '(windmove-left :wk "move window left")
     "wk" '(windmove-up :wk "move window up")
     "wj" '(windmove-down :wk "move window down")
     "wv" '(split-window-right :wk "vertical split")
     "ws" '(split-window-below :wk "horizontal split")
     "wV" '(split-window-right-and-focus :wk "focus vertical split")
     "wS" '(split-window-below-and-focus :wk "focus horizontal split")

     ;; Buffer Keybindings
     "b"  '(:ignore t :wk "buffer")
     "bb" '(ivy-switch-buffer :wk "buffer list")
     "bp" '(previous-buffer :wk "prev buffer")
     "bn" '(next-buffer :wk "next buffer")


     "f" '(:ignore t :wk "files")
     "ff" '(counsel-find-file :wk "find file")
     "fr" '(counsel-recentf :wk "find recent file")
     "ft" '(treemacs-toggle :wk "file tree")
     "fs" '(save-buffer :wk "save file")
     "fe" '(:ignore t :wk "emacs")
     "feR" '(reload-config :wk "reload config")
     "fed" '(edit-config :wk "edit config")

     ;; Applications
     "a" '(:ignore t :wk "applications")
     "ast" '(term :wk term))

    (general-define-key
     :prefix "g"
     :keymaps 'normal
     "cc" 'evilnc-comment-or-uncomment-lines))
#+END_SRC
* Evil
** Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-k") nil)
  )
#+END_SRC

** Nerd Commenter
#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter
  :ensure t
  :commands (evilnc-comment-or-uncomment-lines))
#+END_SRC

** Escape
#+BEGIN_SRC emacs-lisp
  (use-package evil-escape
    :ensure t
    :diminish evil-escape-mode
    :config
    (evil-escape-mode))
    ;; :general
    ;; (:keymaps 'global
    ;;           "ESC" 'evil-escape))
#+END_SRC

** Smartpaerns
#+BEGIN_SRC emacs-lisp
  ;; (use-package evil-smartparens
  ;;   :ensure t
  ;;   :hook (emacs-lisp-mode . evil-smartparens-mode)
  ;;   :config
  ;;   (smartparens-strict-mode))
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :diminish flycheck-mode
  :ensure t
  :commands (global-flycheck-mode)
  :init
  (setq-default flycheck-disabled-checkers '())
  (add-hook 'after-init-hook #'global-flycheck-mode)

  )
#+END_SRC

* Beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :diminish beacon-mode
  :config
  (beacon-mode 1))
#+END_SRC

* COMMENT Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish ivy-mode ; does not display ivy in the modeline
    :init (ivy-mode 1)        ; enable ivy globally at startup
    :config
    (setq ivy-count-format "(%d/%d) ") ; count format, from the ivy help page

    (setq ivy-use-virtual-buffers t)   ; extend searching to bookmarks and â€¦
    (setq ivy-height 20)               ; set height of the ivy window
    :general
    (:keymaps 'ivy-minibuffer-map
              "C-j" 'ivy-next-line
              "C-k" 'ivy-previous-line)
    )
#+END_SRC

* Counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :diminish counsel-mode
  :commands (counsel-M-x counsel-find-file counsel-recentf)
  :config
  (counsel-mode))
#+END_SRC

* Which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3)
  (which-key-mode))
#+END_SRC

* Modeline
** Icons
#+BEGIN_SRC emacs-lisp
(use-package mode-icons
  :ensure t
  :config
  (mode-icons-mode))
#+END_SRC

** Spaceline
#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :ensure mode-icons
  :config
  (require 'spaceline-config)
  (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
  (spaceline-spacemacs-theme))
#+END_SRC

* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :defer nil
    :diminish company-mode
    :config
    (global-company-mode)
    :general
    (:keymaps 'company-mode-map
              "C-j" 'company-select-next
              "C-k" 'company-select-previous))

#+END_SRC

* Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :config
    (treemacs-follow-mode t))

  (use-package treemacs-evil
    :ensure t
    :after treemacs)
#+END_SRC
* Org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :config
    (setq org-log-done t)
    (setq org-agenda-files (list "~/org/work.org"
                               "~/org/school.org"
                               "~/org/home.org"))
    )

  (use-package org-bullets
  :ensure t
  :hook (org-mode . org-bullets-mode))

#+END_SRC
* Languages
** Python
#+BEGIN_SRC emacs-lisp
   (use-package company-anaconda
    :ensure t
    :after company
    :config
    (add-to-list 'company-backends 'company-anaconda)
    )

  (use-package anaconda-mode
    :ensure t
    :hook python-mode
    :hook (python-mode . anaconda-eldoc-mode)
    :general
    (:states 'normal
     :keymaps 'python-mode-map
     :prefix "SPC"
     "m" '(:ignore t :wk "python mode")
     "me" '(:ignore t :wk "enviornment")
     "mea" '(pythonic-activate :wk "activate enviornment"))
    )
#+END_SRC
** Javascript-jsx
*** Tern
#+BEGIN_SRC emacs-lisp
  (add-to-list 'exec-path "/home/charlie/.npm-global/bin")

  (use-package tern
    :ensure t
    :mode ("\\.js" . tern-mode))

  (use-package company-tern
    :ensure t
    :after company
    :config
    (add-to-list 'company-backends 'company-tern))
#+END_SRC
*** Rjsx
#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode
    :ensure t
    :mode ("\\.js" . rjsx-mode)
    :config
    )
#+END_SRC

*** Eslint
#+BEGIN_SRC emacs-lisp
  (setq-default flycheck-disabled-checkers
    (append flycheck-disabled-checkers
            '(javascript-jshint)))



#+END_SRC
* Testing
